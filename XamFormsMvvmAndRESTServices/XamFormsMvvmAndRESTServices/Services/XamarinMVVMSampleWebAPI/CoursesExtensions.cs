// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using XamFormsMvvmAndRESTServices;
using XamFormsMvvmAndRESTServices.Models;

namespace XamFormsMvvmAndRESTServices
{
    public static partial class CoursesExtensions
    {
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.ICourses.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Course DeleteCourse(this ICourses operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICourses)s).DeleteCourseAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.ICourses.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Course> DeleteCourseAsync(this ICourses operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<XamFormsMvvmAndRESTServices.Models.Course> result = await operations.DeleteCourseWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.ICourses.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Course GetCourse(this ICourses operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICourses)s).GetCourseAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.ICourses.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Course> GetCourseAsync(this ICourses operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<XamFormsMvvmAndRESTServices.Models.Course> result = await operations.GetCourseWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.ICourses.
        /// </param>
        public static IList<Course> GetCourses(this ICourses operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICourses)s).GetCoursesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.ICourses.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Course>> GetCoursesAsync(this ICourses operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<XamFormsMvvmAndRESTServices.Models.Course>> result = await operations.GetCoursesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.ICourses.
        /// </param>
        /// <param name='course'>
        /// Required.
        /// </param>
        public static Course PostCourse(this ICourses operations, Course course)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICourses)s).PostCourseAsync(course);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.ICourses.
        /// </param>
        /// <param name='course'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Course> PostCourseAsync(this ICourses operations, Course course, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<XamFormsMvvmAndRESTServices.Models.Course> result = await operations.PostCourseWithOperationResponseAsync(course, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.ICourses.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='course'>
        /// Required.
        /// </param>
        public static object PutCourse(this ICourses operations, int id, Course course)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICourses)s).PutCourseAsync(id, course);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.ICourses.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='course'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutCourseAsync(this ICourses operations, int id, Course course, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutCourseWithOperationResponseAsync(id, course, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
