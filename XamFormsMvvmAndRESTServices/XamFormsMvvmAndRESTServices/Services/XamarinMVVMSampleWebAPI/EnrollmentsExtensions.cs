// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using XamFormsMvvmAndRESTServices;
using XamFormsMvvmAndRESTServices.Models;

namespace XamFormsMvvmAndRESTServices
{
    public static partial class EnrollmentsExtensions
    {
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.IEnrollments.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Enrollment DeleteEnrollment(this IEnrollments operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IEnrollments)s).DeleteEnrollmentAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.IEnrollments.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Enrollment> DeleteEnrollmentAsync(this IEnrollments operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<XamFormsMvvmAndRESTServices.Models.Enrollment> result = await operations.DeleteEnrollmentWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.IEnrollments.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Enrollment GetEnrollment(this IEnrollments operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IEnrollments)s).GetEnrollmentAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.IEnrollments.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Enrollment> GetEnrollmentAsync(this IEnrollments operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<XamFormsMvvmAndRESTServices.Models.Enrollment> result = await operations.GetEnrollmentWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.IEnrollments.
        /// </param>
        public static IList<Enrollment> GetEnrollments(this IEnrollments operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IEnrollments)s).GetEnrollmentsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.IEnrollments.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Enrollment>> GetEnrollmentsAsync(this IEnrollments operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<XamFormsMvvmAndRESTServices.Models.Enrollment>> result = await operations.GetEnrollmentsWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.IEnrollments.
        /// </param>
        /// <param name='enrollment'>
        /// Required.
        /// </param>
        public static Enrollment PostEnrollment(this IEnrollments operations, Enrollment enrollment)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IEnrollments)s).PostEnrollmentAsync(enrollment);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.IEnrollments.
        /// </param>
        /// <param name='enrollment'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Enrollment> PostEnrollmentAsync(this IEnrollments operations, Enrollment enrollment, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<XamFormsMvvmAndRESTServices.Models.Enrollment> result = await operations.PostEnrollmentWithOperationResponseAsync(enrollment, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.IEnrollments.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='enrollment'>
        /// Required.
        /// </param>
        public static object PutEnrollment(this IEnrollments operations, int id, Enrollment enrollment)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IEnrollments)s).PutEnrollmentAsync(id, enrollment);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamFormsMvvmAndRESTServices.IEnrollments.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='enrollment'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutEnrollmentAsync(this IEnrollments operations, int id, Enrollment enrollment, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutEnrollmentWithOperationResponseAsync(id, enrollment, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
