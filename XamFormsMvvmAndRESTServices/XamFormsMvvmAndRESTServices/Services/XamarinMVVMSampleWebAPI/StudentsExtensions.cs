// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using XamMvvmAndWebServices;
using XamMvvmAndWebServices.Models;

namespace XamMvvmAndWebServices
{
    public static partial class StudentsExtensions
    {
        /// <param name='operations'>
        /// Reference to the XamMvvmAndWebServices.IStudents.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Student DeleteStudent(this IStudents operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStudents)s).DeleteStudentAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamMvvmAndWebServices.IStudents.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Student> DeleteStudentAsync(this IStudents operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<XamMvvmAndWebServices.Models.Student> result = await operations.DeleteStudentWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the XamMvvmAndWebServices.IStudents.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Student GetStudent(this IStudents operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStudents)s).GetStudentAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamMvvmAndWebServices.IStudents.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Student> GetStudentAsync(this IStudents operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<XamMvvmAndWebServices.Models.Student> result = await operations.GetStudentWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the XamMvvmAndWebServices.IStudents.
        /// </param>
        public static IList<Student> GetStudents(this IStudents operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStudents)s).GetStudentsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamMvvmAndWebServices.IStudents.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Student>> GetStudentsAsync(this IStudents operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<XamMvvmAndWebServices.Models.Student>> result = await operations.GetStudentsWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the XamMvvmAndWebServices.IStudents.
        /// </param>
        /// <param name='student'>
        /// Required.
        /// </param>
        public static Student PostStudent(this IStudents operations, Student student)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStudents)s).PostStudentAsync(student);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamMvvmAndWebServices.IStudents.
        /// </param>
        /// <param name='student'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Student> PostStudentAsync(this IStudents operations, Student student, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<XamMvvmAndWebServices.Models.Student> result = await operations.PostStudentWithOperationResponseAsync(student, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the XamMvvmAndWebServices.IStudents.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='student'>
        /// Required.
        /// </param>
        public static object PutStudent(this IStudents operations, int id, Student student)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IStudents)s).PutStudentAsync(id, student);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the XamMvvmAndWebServices.IStudents.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='student'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutStudentAsync(this IStudents operations, int id, Student student, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutStudentWithOperationResponseAsync(id, student, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
